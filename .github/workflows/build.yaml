on:
  pull_request:
    branches: [ main ]

name: Build

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            - name: Setup Node.js for use with action
            env:
            ACTIONS_ALLOW_UNSECURE_COMMANDS: true
            uses: actions/setup-node@v2
            with:
            node-version: '12.16.1'
            check-latest: true
      - name: Setup Node.js for use with action
        uses: actions/setup-node@v2
        with:
          node-version: '12.16.1'
          check-latest: true
      - name: nvm install
        run: |
          curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
          nvm --version
          nvm install v12.16.1
          nvm use v12.16.1
          npm install
      - name: lint
        run: npm run lint
      - name: build images
        run: cd dev-net && ./build-auth.sh
      # First, unit test for auth-server only
      - name: deploy base 0-org network with postgres, redis
        run: |
          set -x
          cd /home/runner/work/fabric-es/fabric-es/deployments/dev-net && sudo ./dn-run.0-db-red.sh
          docker exec postgres01 psql -U postgres --list
      - name: Run unit tests for auth-server
        run: sudo npm run unit-test
      - name: clean-up artifacts
        run: sudo rm -rf dev-net/artifacts
      - name: clean-up volme
        run: sudo rm -rf dev-net/volume
